name: Content Quality Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'content/**/*.md'
      - 'schemas/**/*.json'
      - 'scripts/content-processing/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'content/**/*.md'
      - 'schemas/**/*.json'
      - 'scripts/content-processing/**'

jobs:
  validate-content:
    runs-on: ubuntu-latest
    name: Validate Content Quality
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install validation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema pyyaml markdown

      - name: Make validation scripts executable
        run: |
          chmod +x ./scripts/content-processing/validate-content.sh
          chmod +x ./.githooks/pre-commit

      - name: Run content validation
        id: validation
        run: |
          echo "Starting content validation..."
          ./scripts/content-processing/validate-content.sh 2>&1 | tee validation-output.txt
          echo "validation-exit-code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      - name: Check for validation errors
        if: steps.validation.outputs.validation-exit-code != '0'
        run: |
          echo "‚ùå Content validation failed"
          cat validation-output.txt
          exit 1

      - name: Validate schema files
        run: |
          echo "Validating JSON schema files..."
          for schema in ./schemas/**/*.json; do
            echo "Checking $schema"
            python -m json.tool "$schema" > /dev/null
            if [ $? -eq 0 ]; then
              echo "‚úÖ $schema is valid JSON"
            else
              echo "‚ùå $schema has invalid JSON syntax"
              exit 1
            fi
          done

      - name: Check markdown formatting
        run: |
          echo "Checking markdown formatting..."
          
          # Check for files without frontmatter
          find ./content -name "*.md" -type f | while read file; do
            if ! head -1 "$file" | grep -q "^---$"; then
              echo "‚ùå Missing frontmatter in $file"
              exit 1
            fi
          done
          
          echo "‚úÖ All markdown files have proper frontmatter"

      - name: Validate internal links
        run: |
          echo "Validating internal links..."
          
          # Find all markdown files with internal links
          find ./content -name "*.md" -type f -exec grep -l '\[.*\](\.\/.*\.md\|\.\.\/.*\.md)' {} \; | while read file; do
            echo "Checking internal links in $file"
            
            # Extract and validate each internal link
            grep -o '\[.*\](\.\/.*\.md\|\.\.\/.*\.md)' "$file" | while read link; do
              link_path=$(echo "$link" | sed 's/.*](\(.*\))/\1/')
              
              # Convert relative path to absolute
              if [[ "$link_path" == ./* ]]; then
                full_path="$(dirname "$file")/${link_path#./}"
              elif [[ "$link_path" == ../* ]]; then
                full_path="$(dirname "$file")/$link_path"
              else
                full_path="$link_path"
              fi
              
              if [ ! -f "$full_path" ]; then
                echo "‚ùå Broken internal link in $file: $link_path (resolved to: $full_path)"
                exit 1
              fi
            done
          done
          
          echo "‚úÖ All internal links are valid"

      - name: Check content accessibility
        run: |
          echo "Checking accessibility compliance..."
          
          # Check for images without alt text
          find ./content -name "*.md" -type f | while read file; do
            if grep -q '!\[]\(' "$file"; then
              echo "‚ùå Found images without alt text in $file"
              grep -n '!\[]\(' "$file"
              exit 1
            fi
          done
          
          echo "‚úÖ All images have alt text"

      - name: Generate validation report
        if: always()
        run: |
          echo "## Content Validation Report" > validation-report.md
          echo "" >> validation-report.md
          echo "**Validation Date:** $(date)" >> validation-report.md
          echo "**Commit:** ${{ github.sha }}" >> validation-report.md
          echo "" >> validation-report.md
          
          if [ -f validation-output.txt ]; then
            echo "### Validation Output" >> validation-report.md
            echo '```' >> validation-report.md
            cat validation-output.txt >> validation-report.md
            echo '```' >> validation-report.md
          fi
          
          echo "" >> validation-report.md
          echo "### Files Validated" >> validation-report.md
          find ./content -name "*.md" -type f | wc -l | xargs echo "- Markdown files:" >> validation-report.md
          find ./schemas -name "*.json" -type f | wc -l | xargs echo "- Schema files:" >> validation-report.md
          
          # Count content by type
          echo "" >> validation-report.md
          echo "### Content Breakdown" >> validation-report.md
          find ./content/principles -name "*.md" -type f | wc -l | xargs echo "- Chapter files:" >> validation-report.md
          find ./content/templates -name "*.md" -type f | wc -l | xargs echo "- Template files:" >> validation-report.md
          find ./content/case-studies -name "*.md" -type f | wc -l | xargs echo "- Case study files:" >> validation-report.md

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: content-validation-report
          path: validation-report.md

      - name: Comment on PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## üìã Content Validation Results\n\n';
            
            if ('${{ steps.validation.outputs.validation-exit-code }}' === '0') {
              comment += '‚úÖ **All content validation checks passed!**\n\n';
              comment += '### Validation Summary\n';
              comment += '- Schema validation: ‚úÖ Passed\n';
              comment += '- Markdown formatting: ‚úÖ Passed\n';
              comment += '- Internal links: ‚úÖ Passed\n';
              comment += '- Accessibility: ‚úÖ Passed\n';
            } else {
              comment += '‚ùå **Content validation failed**\n\n';
              comment += 'Please check the workflow logs and fix the validation errors before merging.\n\n';
              
              if (fs.existsSync('validation-output.txt')) {
                const output = fs.readFileSync('validation-output.txt', 'utf8');
                comment += '### Validation Output\n```\n' + output + '\n```\n';
              }
            }
            
            comment += '\n---\n*Automated validation by GitHub Actions*';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  validate-templates:
    runs-on: ubuntu-latest
    name: Validate Prompt Templates
    if: contains(github.event.head_commit.message, 'template') || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install template validation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Validate template structure
        run: |
          echo "Validating prompt template structure..."
          
          find ./content/templates -name "*.md" -type f | while read template; do
            echo "Validating template: $template"
            
            # Check for required template metadata
            if ! grep -q "template_category:" "$template"; then
              echo "‚ùå Missing template_category in $template"
              exit 1
            fi
            
            if ! grep -q "use_case:" "$template"; then
              echo "‚ùå Missing use_case in $template"
              exit 1
            fi
            
            # Check for template variables
            if grep -q "{[A-Z_][A-Z0-9_]*}" "$template"; then
              echo "‚úÖ Template variables found in $template"
            else
              echo "‚ö†Ô∏è No template variables found in $template"
            fi
            
            # Check for usage instructions
            if grep -qi "## Usage\|## Instructions\|## How to Use" "$template"; then
              echo "‚úÖ Usage instructions found in $template"
            else
              echo "‚ùå Missing usage instructions in $template"
              exit 1
            fi
          done

      - name: Template effectiveness check
        run: |
          echo "Checking template effectiveness documentation..."
          
          find ./content/templates -name "*.md" -type f | while read template; do
            if grep -q "effectiveness_rating:" "$template"; then
              rating=$(grep "effectiveness_rating:" "$template" | cut -d':' -f2 | tr -d ' ')
              if [ "$rating" -ge 3 ]; then
                echo "‚úÖ $template has good effectiveness rating: $rating"
              else
                echo "‚ö†Ô∏è $template has low effectiveness rating: $rating"
              fi
            else
              echo "‚ö†Ô∏è No effectiveness rating in $template"
            fi
          done