<?xml version="1.0" encoding="UTF-8"?>
<svg width="1800" height="1200" viewBox="0 0 1800 1200" xmlns="http://www.w3.org/2000/svg" role="img" aria-labelledby="fo02-title fo02-desc">
  <title id="fo02-title">AI Development Maturity Assessment - Five-Level Framework Evaluation</title>
  <desc id="fo02-desc">Interactive assessment visualization showing five maturity levels (Traditional, AI-Aware, AI-Enhanced, AI-Optimized, AI-Elite) with competency indicators, real-time scoring interface, and personalized recommendations for AI development progression</desc>
  
  <!-- Definitions for gradients, patterns, and interactive states -->
  <defs>
    <!-- Assessment gradient themes -->
    <linearGradient id="assessmentPrimaryGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#6366F1;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#8B5CF6;stop-opacity:1" />
    </linearGradient>
    
    <!-- Maturity level gradients -->
    <linearGradient id="traditionalGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#6B7280;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#4B5563;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="aiAwareGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#F59E0B;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#D97706;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="aiEnhancedGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#3B82F6;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1D4ED8;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="aiOptimizedGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#10B981;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#059669;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="aiEliteGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#EF4444;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#DC2626;stop-opacity:1" />
    </linearGradient>
    
    <!-- Assessment progress gradients -->
    <linearGradient id="progressGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#6B7280;stop-opacity:1" />
      <stop offset="25%" style="stop-color:#F59E0B;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#3B82F6;stop-opacity:1" />
      <stop offset="75%" style="stop-color:#10B981;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#EF4444;stop-opacity:1" />
    </linearGradient>
    
    <!-- Interactive effects -->
    <filter id="assessmentGlow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="0" stdDeviation="8" flood-color="#6366F1" flood-opacity="0.5"/>
    </filter>
    
    <filter id="levelGlow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="0" stdDeviation="6" flood-color="#10B981" flood-opacity="0.4"/>
    </filter>
    
    <filter id="scoreGlow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="0" stdDeviation="4" flood-color="#F59E0B" flood-opacity="0.6"/>
    </filter>
    
    <filter id="currentLevelGlow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="0" stdDeviation="5" flood-color="#3B82F6" flood-opacity="0.3"/>
    </filter>
    
    <!-- Arrow markers -->
    <marker id="assessmentArrow" markerWidth="12" markerHeight="8" refX="12" refY="4" orient="auto">
      <polygon points="0 0, 12 4, 0 8" fill="#6366F1" />
    </marker>
    
    <marker id="progressArrow" markerWidth="10" markerHeight="6" refX="10" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#10B981" />
    </marker>
    
    <!-- Maturity level patterns -->
    <pattern id="traditionalPattern" patternUnits="userSpaceOnUse" width="20" height="20">
      <rect width="20" height="20" fill="#F9FAFB"/>
      <rect x="4" y="4" width="12" height="12" rx="2" fill="none" stroke="#6B7280" stroke-width="1" opacity="0.4"/>
      <circle cx="10" cy="10" r="2" fill="#6B7280" opacity="0.6"/>
    </pattern>
    
    <pattern id="aiAwarePattern" patternUnits="userSpaceOnUse" width="22" height="22">
      <rect width="22" height="22" fill="#FEF3C7"/>
      <circle cx="11" cy="11" r="6" fill="none" stroke="#F59E0B" stroke-width="1" opacity="0.4"/>
      <path d="M8 11 L11 14 L14 8" stroke="#F59E0B" stroke-width="1" fill="none" opacity="0.6"/>
    </pattern>
    
    <pattern id="aiEnhancedPattern" patternUnits="userSpaceOnUse" width="24" height="24">
      <rect width="24" height="24" fill="#EFF6FF"/>
      <circle cx="8" cy="8" r="3" fill="#3B82F6" opacity="0.4"/>
      <circle cx="16" cy="8" r="3" fill="#3B82F6" opacity="0.4"/>
      <circle cx="12" cy="16" r="3" fill="#3B82F6" opacity="0.4"/>
      <path d="M8 11 L16 11 M10 8 L14 16 M14 8 L10 16" stroke="#3B82F6" stroke-width="1" opacity="0.3"/>
    </pattern>
    
    <pattern id="aiOptimizedPattern" patternUnits="userSpaceOnUse" width="18" height="18">
      <rect width="18" height="18" fill="#F0FDF4"/>
      <path d="M5 9 L8 12 L13 6" stroke="#10B981" stroke-width="2" fill="none" opacity="0.6"/>
      <circle cx="9" cy="9" r="7" fill="none" stroke="#10B981" stroke-width="1" opacity="0.3"/>
    </pattern>
    
    <pattern id="aiElitePattern" patternUnits="userSpaceOnUse" width="20" height="20">
      <rect width="20" height="20" fill="#FEF2F2"/>
      <polygon points="10,4 16,8 10,12 4,8" fill="none" stroke="#EF4444" stroke-width="1" opacity="0.4"/>
      <circle cx="10" cy="8" r="6" fill="none" stroke="#EF4444" stroke-width="1" opacity="0.3"/>
      <path d="M10 5 L10 11 M7 8 L13 8" stroke="#EF4444" stroke-width="1" opacity="0.5"/>
    </pattern>
    
    <!-- Assessment indicator patterns -->
    <pattern id="competencyPattern" patternUnits="userSpaceOnUse" width="16" height="16">
      <rect width="16" height="16" fill="#FEF3C7"/>
      <circle cx="8" cy="8" r="4" fill="none" stroke="#F59E0B" stroke-width="2" opacity="0.6"/>
      <path d="M5 8 L7 10 L11 6" stroke="#F59E0B" stroke-width="2" fill="none"/>
    </pattern>
  </defs>
  
  <!-- Background -->
  <rect width="1800" height="1200" fill="#F8FAFC" />
  
  <!-- Header Section -->
  <rect x="0" y="0" width="1800" height="80" fill="url(#assessmentPrimaryGradient)" />
  <text x="60" y="35" font-family="Inter, sans-serif" font-size="32" font-weight="700" fill="white">
    AI Development Maturity Assessment
  </text>
  <text x="60" y="60" font-family="Inter, sans-serif" font-size="18" fill="#C7D2FE">
    FO-02: Five-Level Framework Evaluation - Interactive Self-Assessment Tool
  </text>
  
  <!-- Assessment Icon -->
  <g id="assessment-icon" transform="translate(1680, 20)">
    <circle cx="25" cy="25" r="20" fill="white" opacity="0.2"/>
    <polygon points="15,15 35,15 35,35 15,35" fill="white" opacity="0.8"/>
    <path d="M20 25 L23 28 L30 20" stroke="#6366F1" stroke-width="2" fill="none"/>
    <circle cx="25" cy="10" r="3" fill="#6366F1"/>
  </g>
  
  <!-- Assessment Control Panel -->
  <g id="assessment-control-panel" transform="translate(60, 100)">
    <rect x="0" y="0" width="1680" height="100" rx="12" fill="white" stroke="#E5E7EB" stroke-width="1"/>
    <rect x="0" y="0" width="1680" height="40" rx="12" fill="url(#assessmentPrimaryGradient)"/>
    <text x="20" y="25" font-family="Inter, sans-serif" font-size="18" font-weight="600" fill="white">
      Assessment Progress & Current Score
    </text>
    
    <!-- Assessment metrics -->
    <g transform="translate(20, 50)">
      <text x="0" y="20" font-family="Inter, sans-serif" font-size="14" fill="#6B7280">
        Current Level: AI-Enhanced (Level 3) • Overall Score: 72/100 • Progress: 15 of 25 questions complete
      </text>
      <text x="0" y="40" font-family="Inter, sans-serif" font-size="14" fill="#6B7280">
        Strong Areas: Context Mastery (89%), Dynamic Planning (78%) • Growth Areas: Strategic Testing (54%), Intelligent Review (61%)
      </text>
      
      <!-- Score progress bar -->
      <rect x="700" y="5" width="920" height="12" rx="6" fill="#F3F4F6"/>
      <rect x="700" y="5" width="662" height="12" rx="6" fill="url(#progressGradient)"/>
      <circle cx="1362" cy="11" r="8" fill="#3B82F6" filter="url(#scoreGlow)"/>
      
      <!-- Score breakdown -->
      <g transform="translate(700, 25)">
        <rect x="0" y="0" width="80" height="15" rx="3" fill="#6B7280"/>
        <text x="40" y="11" font-family="Inter, sans-serif" font-size="9" fill="white" text-anchor="middle">Traditional</text>
        
        <rect x="100" y="0" width="120" height="15" rx="3" fill="#F59E0B"/>
        <text x="160" y="11" font-family="Inter, sans-serif" font-size="9" fill="white" text-anchor="middle">AI-Aware</text>
        
        <rect x="240" y="0" width="160" height="15" rx="3" fill="#3B82F6"/>
        <text x="320" y="11" font-family="Inter, sans-serif" font-size="9" fill="white" text-anchor="middle">AI-Enhanced</text>
        
        <rect x="420" y="0" width="200" height="15" rx="3" fill="#10B981"/>
        <text x="520" y="11" font-family="Inter, sans-serif" font-size="9" fill="white" text-anchor="middle">AI-Optimized</text>
        
        <rect x="640" y="0" width="240" height="15" rx="3" fill="#EF4444"/>
        <text x="760" y="11" font-family="Inter, sans-serif" font-size="9" fill="white" text-anchor="middle">AI-Elite</text>
      </g>
    </g>
  </g>
  
  <!-- Main Maturity Pyramid -->
  <g id="maturity-pyramid" transform="translate(60, 240)">
    
    <!-- Level 5: AI-Elite (Top) -->
    <g id="level-5-elite" class="maturity-level" data-level="5" data-score="0">
      <polygon points="350,0 650,0 600,60 400,60" fill="url(#aiEliteGradient)" stroke="white" stroke-width="3" opacity="0.6"/>
      <rect x="350" y="10" width="300" height="40" fill="url(#aiElitePattern)" opacity="0.2"/>
      
      <text x="500" y="25" font-family="Inter, sans-serif" font-size="16" font-weight="700" fill="white" text-anchor="middle">
        Level 5: AI-Elite
      </text>
      <text x="500" y="45" font-family="Inter, sans-serif" font-size="12" fill="#FEE2E2" text-anchor="middle">
        Transformation Master • 340% Productivity
      </text>
      
      <!-- Score indicator -->
      <rect x="655" y="15" width="80" height="30" rx="6" fill="white" stroke="#EF4444" stroke-width="1"/>
      <text x="695" y="25" font-family="Inter, sans-serif" font-size="10" font-weight="500" fill="#EF4444" text-anchor="middle">
        Score: 0/20
      </text>
      <text x="695" y="40" font-family="Inter, sans-serif" font-size="9" fill="#DC2626" text-anchor="middle">
        LOCKED
      </text>
      
      <!-- Competency indicators -->
      <g transform="translate(380, 65)">
        <circle cx="0" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
        <circle cx="30" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
        <circle cx="60" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
        <circle cx="90" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
        <circle cx="120" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
      </g>
    </g>
    
    <!-- Level 4: AI-Optimized -->
    <g id="level-4-optimized" class="maturity-level" data-level="4" data-score="8">
      <polygon points="300,80 700,80 650,140 350,140" fill="url(#aiOptimizedGradient)" stroke="white" stroke-width="3" opacity="0.7"/>
      <rect x="300" y="90" width="400" height="40" fill="url(#aiOptimizedPattern)" opacity="0.2"/>
      
      <text x="500" y="105" font-family="Inter, sans-serif" font-size="16" font-weight="700" fill="white" text-anchor="middle">
        Level 4: AI-Optimized
      </text>
      <text x="500" y="125" font-family="Inter, sans-serif" font-size="12" fill="#D1FAE5" text-anchor="middle">
        Mastery Achieved • 240% Productivity
      </text>
      
      <!-- Score indicator -->
      <rect x="705" y="95" width="80" height="30" rx="6" fill="white" stroke="#10B981" stroke-width="1"/>
      <text x="745" y="105" font-family="Inter, sans-serif" font-size="10" font-weight="500" fill="#10B981" text-anchor="middle">
        Score: 8/20
      </text>
      <text x="745" y="120" font-family="Inter, sans-serif" font-size="9" fill="#059669" text-anchor="middle">
        40% COMPLETE
      </text>
      
      <!-- Competency indicators -->
      <g transform="translate(380, 145)">
        <circle cx="0" cy="5" r="4" fill="#10B981"/>
        <circle cx="30" cy="5" r="4" fill="#10B981"/>
        <circle cx="60" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
        <circle cx="90" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
        <circle cx="120" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
      </g>
    </g>
    
    <!-- Level 3: AI-Enhanced (Current Level) -->
    <g id="level-3-enhanced" class="maturity-level current" data-level="3" data-score="14">
      <polygon points="250,160 750,160 700,220 300,220" fill="url(#aiEnhancedGradient)" stroke="white" stroke-width="4" filter="url(#currentLevelGlow)"/>
      <rect x="250" y="170" width="500" height="40" fill="url(#aiEnhancedPattern)" opacity="0.3"/>
      
      <text x="500" y="185" font-family="Inter, sans-serif" font-size="18" font-weight="700" fill="white" text-anchor="middle">
        Level 3: AI-Enhanced (CURRENT)
      </text>
      <text x="500" y="205" font-family="Inter, sans-serif" font-size="14" fill="#DBEAFE" text-anchor="middle">
        Integration Phase • 180% Productivity
      </text>
      
      <!-- Score indicator -->
      <rect x="755" y="175" width="80" height="30" rx="6" fill="white" stroke="#3B82F6" stroke-width="2" filter="url(#scoreGlow)"/>
      <text x="795" y="185" font-family="Inter, sans-serif" font-size="10" font-weight="600" fill="#3B82F6" text-anchor="middle">
        Score: 14/20
      </text>
      <text x="795" y="200" font-family="Inter, sans-serif" font-size="9" fill="#1D4ED8" text-anchor="middle">
        70% COMPLETE
      </text>
      
      <!-- Competency indicators -->
      <g transform="translate(380, 225)">
        <circle cx="0" cy="5" r="4" fill="#3B82F6"/>
        <circle cx="30" cy="5" r="4" fill="#3B82F6"/>
        <circle cx="60" cy="5" r="4" fill="#3B82F6"/>
        <circle cx="90" cy="5" r="4" fill="#F59E0B">
          <animate attributeName="opacity" values="1;0.5;1" dur="2s" repeatCount="indefinite"/>
        </circle>
        <circle cx="120" cy="5" r="4" fill="#E5E7EB" stroke="#9CA3AF" stroke-width="1"/>
      </g>
    </g>
    
    <!-- Level 2: AI-Aware -->
    <g id="level-2-aware" class="maturity-level completed" data-level="2" data-score="18">
      <polygon points="200,240 800,240 750,300 250,300" fill="url(#aiAwareGradient)" stroke="white" stroke-width="3" opacity="0.9"/>
      <rect x="200" y="250" width="600" height="40" fill="url(#aiAwarePattern)" opacity="0.2"/>
      
      <text x="500" y="265" font-family="Inter, sans-serif" font-size="16" font-weight="700" fill="white" text-anchor="middle">
        Level 2: AI-Aware
      </text>
      <text x="500" y="285" font-family="Inter, sans-serif" font-size="12" fill="#FEF3C7" text-anchor="middle">
        Foundation Built • 120% Productivity
      </text>
      
      <!-- Score indicator -->
      <rect x="805" y="255" width="80" height="30" rx="6" fill="white" stroke="#F59E0B" stroke-width="1"/>
      <text x="845" y="265" font-family="Inter, sans-serif" font-size="10" font-weight="500" fill="#F59E0B" text-anchor="middle">
        Score: 18/20
      </text>
      <text x="845" y="280" font-family="Inter, sans-serif" font-size="9" fill="#D97706" text-anchor="middle">
        90% COMPLETE
      </text>
      
      <!-- Competency indicators -->
      <g transform="translate(380, 305)">
        <circle cx="0" cy="5" r="4" fill="#F59E0B"/>
        <circle cx="30" cy="5" r="4" fill="#F59E0B"/>
        <circle cx="60" cy="5" r="4" fill="#F59E0B"/>
        <circle cx="90" cy="5" r="4" fill="#F59E0B"/>
        <circle cx="120" cy="5" r="4" fill="#F59E0B"/>
      </g>
    </g>
    
    <!-- Level 1: Traditional -->
    <g id="level-1-traditional" class="maturity-level completed" data-level="1" data-score="20">
      <polygon points="150,320 850,320 800,380 200,380" fill="url(#traditionalGradient)" stroke="white" stroke-width="3" opacity="0.9"/>
      <rect x="150" y="330" width="700" height="40" fill="url(#traditionalPattern)" opacity="0.2"/>
      
      <text x="500" y="345" font-family="Inter, sans-serif" font-size="16" font-weight="700" fill="white" text-anchor="middle">
        Level 1: Traditional Development
      </text>
      <text x="500" y="365" font-family="Inter, sans-serif" font-size="12" fill="#F9FAFB" text-anchor="middle">
        Starting Point • Baseline Productivity
      </text>
      
      <!-- Score indicator -->
      <rect x="855" y="335" width="80" height="30" rx="6" fill="white" stroke="#6B7280" stroke-width="1"/>
      <text x="895" y="345" font-family="Inter, sans-serif" font-size="10" font-weight="500" fill="#6B7280" text-anchor="middle">
        Score: 20/20
      </text>
      <text x="895" y="360" font-family="Inter, sans-serif" font-size="9" fill="#4B5563" text-anchor="middle">
        MASTERED
      </text>
      
      <!-- Competency indicators -->
      <g transform="translate(380, 385)">
        <circle cx="0" cy="5" r="4" fill="#6B7280"/>
        <circle cx="30" cy="5" r="4" fill="#6B7280"/>
        <circle cx="60" cy="5" r="4" fill="#6B7280"/>
        <circle cx="90" cy="5" r="4" fill="#6B7280"/>
        <circle cx="120" cy="5" r="4" fill="#6B7280"/>
      </g>
    </g>
    
    <!-- Pyramid connections -->
    <g id="pyramid-connections" opacity="0.4">
      <path d="M500 60 L500 80" stroke="#E5E7EB" stroke-width="2" marker-end="url(#assessmentArrow)"/>
      <path d="M500 140 L500 160" stroke="#E5E7EB" stroke-width="2" marker-end="url(#assessmentArrow)"/>
      <path d="M500 220 L500 240" stroke="#E5E7EB" stroke-width="2" marker-end="url(#assessmentArrow)"/>
      <path d="M500 300 L500 320" stroke="#E5E7EB" stroke-width="2" marker-end="url(#assessmentArrow)"/>
    </g>
  </g>
  
  <!-- Current Assessment Question Panel -->
  <g id="assessment-question-panel" transform="translate(1000, 240)">
    <rect x="0" y="0" width="740" height="300" rx="12" fill="white" stroke="#E5E7EB" stroke-width="1"/>
    <rect x="0" y="0" width="740" height="40" rx="12" fill="#3B82F6"/>
    <text x="20" y="25" font-family="Inter, sans-serif" font-size="18" font-weight="600" fill="white">
      Question 16 of 25: Strategic Testing
    </text>
    
    <g id="question-content" transform="translate(20, 60)">
      <text x="0" y="20" font-family="Inter, sans-serif" font-size="16" font-weight="600" fill="#1F2937">
        How do you approach test case generation in your current workflow?
      </text>
      <text x="0" y="45" font-family="Inter, sans-serif" font-size="14" fill="#4B5563">
        This question assesses your strategic testing maturity level across the five-principle framework.
      </text>
      
      <!-- Answer options -->
      <g transform="translate(0, 70)">
        <!-- Option A -->
        <rect x="0" y="0" width="700" height="30" rx="6" fill="#F9FAFB" stroke="#E5E7EB" stroke-width="1" class="answer-option" data-score="1" style="cursor: pointer;">
          <animate attributeName="opacity" values="1;0.95;1" dur="4s" repeatCount="indefinite"/>
        </rect>
        <circle cx="20" cy="15" r="8" fill="white" stroke="#D1D5DB" stroke-width="2"/>
        <text x="20" y="19" font-family="Inter, sans-serif" font-size="10" fill="#6B7280" text-anchor="middle">A</text>
        <text x="40" y="19" font-family="Inter, sans-serif" font-size="14" fill="#374151">
          I write tests manually after completing the feature implementation
        </text>
        
        <!-- Option B -->
        <rect x="0" y="40" width="700" height="30" rx="6" fill="#FEF3C7" stroke="#F59E0B" stroke-width="1" class="answer-option" data-score="2" style="cursor: pointer;">
        </rect>
        <circle cx="20" cy="55" r="8" fill="white" stroke="#F59E0B" stroke-width="2"/>
        <text x="20" y="59" font-family="Inter, sans-serif" font-size="10" fill="#F59E0B" text-anchor="middle">B</text>
        <text x="40" y="59" font-family="Inter, sans-serif" font-size="14" fill="#92400E">
          I use some AI assistance for generating basic test cases with manual review
        </text>
        
        <!-- Option C -->
        <rect x="0" y="80" width="700" height="30" rx="6" fill="#EFF6FF" stroke="#3B82F6" stroke-width="2" class="answer-option selected" data-score="3" style="cursor: pointer;">
          <animate attributeName="stroke-width" values="2;3;2" dur="2s" repeatCount="indefinite"/>
        </rect>
        <circle cx="20" cy="95" r="8" fill="#3B82F6" stroke="#3B82F6" stroke-width="2"/>
        <path d="M16 95 L19 98 L24 93" stroke="white" stroke-width="2" fill="none"/>
        <text x="40" y="99" font-family="Inter, sans-serif" font-size="14" fill="#1E40AF">
          I integrate AI-powered test generation with context-aware strategies
        </text>
        
        <!-- Option D -->
        <rect x="0" y="120" width="700" height="30" rx="6" fill="#F0FDF4" stroke="#10B981" stroke-width="1" class="answer-option" data-score="4" style="cursor: pointer;">
        </rect>
        <circle cx="20" cy="135" r="8" fill="white" stroke="#10B981" stroke-width="2"/>
        <text x="20" y="139" font-family="Inter, sans-serif" font-size="10" fill="#10B981" text-anchor="middle">D</text>
        <text x="40" y="139" font-family="Inter, sans-serif" font-size="14" fill="#166534">
          I use comprehensive AI optimization with dynamic planning and intelligent review
        </text>
        
        <!-- Option E -->
        <rect x="0" y="160" width="700" height="30" rx="6" fill="#FEF2F2" stroke="#EF4444" stroke-width="1" class="answer-option" data-score="5" style="cursor: pointer;">
        </rect>
        <circle cx="20" cy="175" r="8" fill="white" stroke="#EF4444" stroke-width="2"/>
        <text x="20" y="179" font-family="Inter, sans-serif" font-size="10" fill="#EF4444" text-anchor="middle">E</text>
        <text x="40" y="179" font-family="Inter, sans-serif" font-size="14" fill="#991B1B">
          I've achieved elite transformation with all five principles fully integrated
        </text>
      </g>
      
      <!-- Navigation buttons -->
      <g transform="translate(0, 210)">
        <rect x="0" y="0" width="100" height="35" rx="6" fill="#6B7280" class="nav-button" data-action="previous" style="cursor: pointer;">
        </rect>
        <text x="50" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
          Previous
        </text>
        
        <rect x="120" y="0" width="100" height="35" rx="6" fill="#3B82F6" class="nav-button" data-action="next" style="cursor: pointer;">
          <animate attributeName="opacity" values="1;0.8;1" dur="3s" repeatCount="indefinite"/>
        </rect>
        <text x="170" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
          Next
        </text>
        
        <rect x="240" y="0" width="120" height="35" rx="6" fill="#10B981" class="nav-button" data-action="save" style="cursor: pointer;">
        </rect>
        <text x="300" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
          Save & Continue
        </text>
        
        <rect x="380" y="0" width="100" height="35" rx="6" fill="#F59E0B" class="nav-button" data-action="skip" style="cursor: pointer;">
        </rect>
        <text x="430" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
          Skip
        </text>
        
        <rect x="500" y="0" width="120" height="35" rx="6" fill="#EF4444" class="nav-button" data-action="results" style="cursor: pointer;">
        </rect>
        <text x="560" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
          View Results
        </text>
      </g>
    </g>
  </g>
  
  <!-- Competency Breakdown Panel -->
  <g id="competency-panel" transform="translate(60, 680)">
    <rect x="0" y="0" width="920" height="240" rx="12" fill="white" stroke="#E5E7EB" stroke-width="1"/>
    <rect x="0" y="0" width="920" height="40" rx="12" fill="#10B981"/>
    <text x="20" y="25" font-family="Inter, sans-serif" font-size="18" font-weight="600" fill="white">
      Competency Breakdown by Principle
    </text>
    
    <g id="competency-grid" transform="translate(20, 60)">
      <!-- Context Mastery -->
      <g transform="translate(0, 0)">
        <rect x="0" y="0" width="170" height="80" rx="6" fill="#F0FDF4" stroke="#10B981" stroke-width="1"/>
        <text x="15" y="20" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#10B981">
          Context Mastery
        </text>
        <text x="15" y="40" font-family="Inter, sans-serif" font-size="24" font-weight="700" fill="#10B981">
          89%
        </text>
        <text x="15" y="60" font-family="Inter, sans-serif" font-size="12" fill="#059669">
          Level 4: AI-Optimized
        </text>
        <text x="15" y="75" font-family="Inter, sans-serif" font-size="11" fill="#059669">
          Strong foundation built
        </text>
        
        <!-- Progress bar -->
        <rect x="85" y="20" width="70" height="8" rx="4" fill="#DCFCE7"/>
        <rect x="85" y="20" width="62" height="8" rx="4" fill="#10B981"/>
      </g>
      
      <!-- Dynamic Planning -->
      <g transform="translate(180, 0)">
        <rect x="0" y="0" width="170" height="80" rx="6" fill="#EFF6FF" stroke="#3B82F6" stroke-width="1"/>
        <text x="15" y="20" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#3B82F6">
          Dynamic Planning
        </text>
        <text x="15" y="40" font-family="Inter, sans-serif" font-size="24" font-weight="700" fill="#3B82F6">
          78%
        </text>
        <text x="15" y="60" font-family="Inter, sans-serif" font-size="12" fill="#1D4ED8">
          Level 3: AI-Enhanced
        </text>
        <text x="15" y="75" font-family="Inter, sans-serif" font-size="11" fill="#1D4ED8">
          Good progress made
        </text>
        
        <!-- Progress bar -->
        <rect x="85" y="20" width="70" height="8" rx="4" fill="#DBEAFE"/>
        <rect x="85" y="20" width="55" height="8" rx="4" fill="#3B82F6"/>
      </g>
      
      <!-- Code Evolution -->
      <g transform="translate(360, 0)">
        <rect x="0" y="0" width="170" height="80" rx="6" fill="#F3E8FF" stroke="#8B5CF6" stroke-width="1"/>
        <text x="15" y="20" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#8B5CF6">
          Code Evolution
        </text>
        <text x="15" y="40" font-family="Inter, sans-serif" font-size="24" font-weight="700" fill="#8B5CF6">
          81%
        </text>
        <text x="15" y="60" font-family="Inter, sans-serif" font-size="12" fill="#7C3AED">
          Level 4: AI-Optimized
        </text>
        <text x="15" y="75" font-family="Inter, sans-serif" font-size="11" fill="#7C3AED">
          Advanced integration
        </text>
        
        <!-- Progress bar -->
        <rect x="85" y="20" width="70" height="8" rx="4" fill="#DDD6FE"/>
        <rect x="85" y="20" width="57" height="8" rx="4" fill="#8B5CF6"/>
      </g>
      
      <!-- Strategic Testing -->
      <g transform="translate(540, 0)">
        <rect x="0" y="0" width="170" height="80" rx="6" fill="#FEF3C7" stroke="#F59E0B" stroke-width="2" filter="url(#scoreGlow)"/>
        <text x="15" y="20" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#F59E0B">
          Strategic Testing
        </text>
        <text x="15" y="40" font-family="Inter, sans-serif" font-size="24" font-weight="700" fill="#F59E0B">
          54%
        </text>
        <text x="15" y="60" font-family="Inter, sans-serif" font-size="12" fill="#D97706">
          Level 2: AI-Aware
        </text>
        <text x="15" y="75" font-family="Inter, sans-serif" font-size="11" fill="#D97706">
          Growth opportunity
        </text>
        
        <!-- Progress bar -->
        <rect x="85" y="20" width="70" height="8" rx="4" fill="#FEF3C7"/>
        <rect x="85" y="20" width="38" height="8" rx="4" fill="#F59E0B">
          <animate attributeName="opacity" values="1;0.7;1" dur="2s" repeatCount="indefinite"/>
        </rect>
      </g>
      
      <!-- Intelligent Review -->
      <g transform="translate(720, 0)">
        <rect x="0" y="0" width="170" height="80" rx="6" fill="#FEF2F2" stroke="#EF4444" stroke-width="1"/>
        <text x="15" y="20" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#EF4444">
          Intelligent Review
        </text>
        <text x="15" y="40" font-family="Inter, sans-serif" font-size="24" font-weight="700" fill="#EF4444">
          61%
        </text>
        <text x="15" y="60" font-family="Inter, sans-serif" font-size="12" fill="#DC2626">
          Level 3: AI-Enhanced
        </text>
        <text x="15" y="75" font-family="Inter, sans-serif" font-size="11" fill="#DC2626">
          Needs development
        </text>
        
        <!-- Progress bar -->
        <rect x="85" y="20" width="70" height="8" rx="4" fill="#FEE2E2"/>
        <rect x="85" y="20" width="43" height="8" rx="4" fill="#EF4444"/>
      </g>
      
      <!-- Overall assessment -->
      <g transform="translate(0, 100)">
        <rect x="0" y="0" width="880" height="60" rx="6" fill="#F8FAFC" stroke="#CBD5E1" stroke-width="1"/>
        <text x="20" y="25" font-family="Inter, sans-serif" font-size="16" font-weight="600" fill="#374151">
          Overall Assessment: AI-Enhanced Developer (Level 3)
        </text>
        <text x="20" y="45" font-family="Inter, sans-serif" font-size="14" fill="#6B7280">
          Score: 72/100 • Next level threshold: 80/100 • Estimated time to next level: 3-4 weeks with focused improvement
        </text>
        
        <rect x="600" y="15" width="260" height="30" rx="6" fill="#3B82F6"/>
        <text x="730" y="35" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
          Get Personalized Improvement Plan
        </text>
      </g>
    </g>
  </g>
  
  <!-- Personalized Recommendations Panel -->
  <g id="recommendations-panel" transform="translate(1000, 560)">
    <rect x="0" y="0" width="740" height="360" rx="12" fill="white" stroke="#E5E7EB" stroke-width="1"/>
    <rect x="0" y="0" width="740" height="40" rx="12" fill="#8B5CF6"/>
    <text x="20" y="25" font-family="Inter, sans-serif" font-size="18" font-weight="600" fill="white">
      Personalized Recommendations & Next Steps
    </text>
    
    <g id="recommendations-content" transform="translate(20, 60)">
      <text x="0" y="20" font-family="Inter, sans-serif" font-size="16" font-weight="600" fill="#1F2937">
        Priority Improvement Areas
      </text>
      <text x="0" y="40" font-family="Inter, sans-serif" font-size="14" fill="#4B5563">
        Based on your assessment, focus on these areas to reach AI-Optimized level:
      </text>
      
      <!-- Recommendation cards -->
      <g transform="translate(0, 60)">
        <!-- Priority 1: Strategic Testing -->
        <rect x="0" y="0" width="700" height="60" rx="8" fill="#FEF3C7" stroke="#F59E0B" stroke-width="2"/>
        <rect x="10" y="10" width="40" height="40" rx="6" fill="#F59E0B"/>
        <text x="30" y="35" font-family="Inter, sans-serif" font-size="18" font-weight="700" fill="white" text-anchor="middle">1</text>
        <text x="60" y="25" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#D97706">
          Strategic Testing Enhancement
        </text>
        <text x="60" y="45" font-family="Inter, sans-serif" font-size="12" fill="#92400E">
          Focus: AI-assisted test generation, coverage optimization, integration testing patterns
        </text>
        
        <!-- Priority 2: Intelligent Review -->
        <rect x="0" y="70" width="700" height="60" rx="8" fill="#FEF2F2" stroke="#EF4444" stroke-width="1"/>
        <rect x="10" y="80" width="40" height="40" rx="6" fill="#EF4444"/>
        <text x="30" y="105" font-family="Inter, sans-serif" font-size="18" font-weight="700" fill="white" text-anchor="middle">2</text>
        <text x="60" y="95" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#DC2626">
          Intelligent Review Systems
        </text>
        <text x="60" y="115" font-family="Inter, sans-serif" font-size="12" fill="#991B1B">
          Focus: AI-powered code review, automated feedback loops, quality improvement cycles
        </text>
        
        <!-- Learning path -->
        <rect x="0" y="150" width="700" height="80" rx="8" fill="#F0F9FF" stroke="#3B82F6" stroke-width="1"/>
        <text x="20" y="175" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="#1E40AF">
          Recommended Learning Path (3-4 weeks):
        </text>
        <text x="20" y="195" font-family="Inter, sans-serif" font-size="12" fill="#1D4ED8">
          Week 1: Strategic Testing fundamentals and AI integration
        </text>
        <text x="20" y="210" font-family="Inter, sans-serif" font-size="12" fill="#1D4ED8">
          Week 2-3: Intelligent Review implementation and optimization
        </text>
        <text x="20" y="225" font-family="Inter, sans-serif" font-size="12" fill="#1D4ED8">
          Week 4: Integration testing and performance validation
        </text>
        
        <!-- Action buttons -->
        <g transform="translate(0, 250)">
          <rect x="0" y="0" width="150" height="35" rx="6" fill="#F59E0B"/>
          <text x="75" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
            Start Learning Path
          </text>
          
          <rect x="170" y="0" width="130" height="35" rx="6" fill="#3B82F6"/>
          <text x="235" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
            Get Detailed Plan
          </text>
          
          <rect x="320" y="0" width="120" height="35" rx="6" fill="#10B981"/>
          <text x="380" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
            Track Progress
          </text>
          
          <rect x="460" y="0" width="100" height="35" rx="6" fill="white" stroke="#D1D5DB" stroke-width="1"/>
          <text x="510" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="500" fill="#374151" text-anchor="middle">
            Retake Test
          </text>
          
          <rect x="580" y="0" width="120" height="35" rx="6" fill="#8B5CF6"/>
          <text x="640" y="23" font-family="Inter, sans-serif" font-size="14" font-weight="600" fill="white" text-anchor="middle">
            Share Results
          </text>
        </g>
      </g>
    </g>
  </g>
  
  <!-- Offline Support Indicator -->
  <g id="offline-indicator" transform="translate(1620, 950)">
    <rect x="0" y="0" width="120" height="30" rx="15" fill="#10B981" opacity="0.8"/>
    <circle cx="20" cy="15" r="6" fill="white"/>
    <text x="35" y="19" font-family="Inter, sans-serif" font-size="12" fill="white">
      Offline Ready
    </text>
  </g>
  
  <!-- Mobile Responsive Detection -->
  <style>
    @media (max-width: 768px) {
      #maturity-pyramid {
        transform: translate(30, 200) scale(0.6);
      }
      #assessment-question-panel, #recommendations-panel {
        transform: translate(30, 450) scale(0.8);
      }
      #competency-panel {
        transform: translate(30, 650) scale(0.9);
      }
      .maturity-level text {
        font-size: 12px;
      }
    }
    
    .maturity-level {
      transition: all 0.3s ease;
    }
    
    .maturity-level:hover {
      transform: scale(1.02);
    }
    
    .answer-option:hover {
      transform: translateX(5px);
      filter: url(#levelGlow);
    }
    
    .nav-button:hover {
      opacity: 0.9;
      transform: translateY(-1px);
    }
    
    .current {
      animation: currentLevel 3s ease-in-out infinite alternate;
    }
    
    @keyframes currentLevel {
      0% { transform: scale(1); }
      100% { transform: scale(1.01); }
    }
    
    .selected {
      animation: selectedAnswer 2s ease-in-out infinite alternate;
    }
    
    @keyframes selectedAnswer {
      0% { opacity: 1; }
      100% { opacity: 0.9; }
    }
    
    .completed {
      opacity: 0.9;
    }
  </style>
  
  <!-- Interactive JavaScript for assessment functionality -->
  <script type="text/javascript">
    <![CDATA[
    // AI Development Maturity Assessment Interactive System
    class MaturityAssessment {
      constructor() {
        this.currentQuestion = 16;
        this.totalQuestions = 25;
        this.currentLevel = 3;
        this.overallScore = 72;
        this.principleScores = {
          contextMastery: 89,
          dynamicPlanning: 78,
          codeEvolution: 81,
          strategicTesting: 54,
          intelligentReview: 61
        };
        
        this.levelThresholds = {
          1: { min: 0, max: 30, name: 'Traditional' },
          2: { min: 31, max: 50, name: 'AI-Aware' },
          3: { min: 51, max: 70, name: 'AI-Enhanced' },
          4: { min: 71, max: 85, name: 'AI-Optimized' },
          5: { min: 86, max: 100, name: 'AI-Elite' }
        };
        
        this.questions = this.generateQuestions();
        this.userAnswers = {};
        this.assessmentComplete = false;
        
        this.initializeEventListeners();
        this.setupRealTimeScoring();
        this.setupPersonalizationEngine();
        this.setupOfflineCapabilities();
      }
      
      initializeEventListeners() {
        this.setupAnswerOptions();
        this.setupNavigationButtons();
        this.setupLevelInteractions();
        this.setupCompetencyInteractions();
        this.setupAccessibilitySupport();
      }
      
      setupAnswerOptions() {
        // Setup interactive answer options
        const answerOptions = document.querySelectorAll('.answer-option');
        answerOptions.forEach(option => {
          option.addEventListener('click', () => this.selectAnswer(option));
          option.addEventListener('mouseenter', () => this.highlightAnswer(option));
          option.addEventListener('mouseleave', () => this.unhighlightAnswer(option));
          option.addEventListener('focus', () => this.focusAnswer(option));
          option.addEventListener('blur', () => this.blurAnswer(option));
          
          // Make focusable for accessibility
          option.setAttribute('tabindex', '0');
          option.setAttribute('role', 'radio');
          const score = option.getAttribute('data-score');
          option.setAttribute('aria-label', `Answer option ${score}, score value ${score} points`);
        });
      }
      
      setupNavigationButtons() {
        // Setup navigation buttons
        const navButtons = document.querySelectorAll('.nav-button');
        const actions = ['previous', 'next', 'save', 'skip', 'results'];
        
        navButtons.forEach((button, index) => {
          const action = button.getAttribute('data-action');
          if (action) {
            button.addEventListener('click', () => this.handleNavigation(action));
            button.addEventListener('mouseenter', () => this.highlightButton(button));
            button.addEventListener('mouseleave', () => this.unhighlightButton(button));
            
            // Accessibility
            button.setAttribute('tabindex', '0');
            button.setAttribute('role', 'button');
            button.setAttribute('aria-label', `${action} question`);
          }
        });
      }
      
      setupLevelInteractions() {
        // Setup maturity level interactions
        for (let level = 1; level <= 5; level++) {
          const levelElement = document.querySelector(`[data-level="${level}"]`);
          
          if (levelElement) {
            levelElement.addEventListener('click', () => this.showLevelDetails(level));
            levelElement.addEventListener('mouseenter', () => this.highlightLevel(level));
            levelElement.addEventListener('mouseleave', () => this.unhighlightLevel(level));
            
            // Accessibility
            levelElement.setAttribute('tabindex', '0');
            levelElement.setAttribute('role', 'button');
            const levelName = this.levelThresholds[level].name;
            levelElement.setAttribute('aria-label', `Level ${level}: ${levelName}`);
          }
        }
      }
      
      setupCompetencyInteractions() {
        // Setup competency panel interactions
        const principles = ['contextMastery', 'dynamicPlanning', 'codeEvolution', 'strategicTesting', 'intelligentReview'];
        principles.forEach((principle, index) => {
          const competencyElement = document.querySelector(`#competency-grid g:nth-child(${index + 1})`);
          
          if (competencyElement) {
            competencyElement.addEventListener('click', () => this.showCompetencyDetails(principle));
            competencyElement.addEventListener('mouseenter', () => this.highlightCompetency(competencyElement));
            competencyElement.addEventListener('mouseleave', () => this.unhighlightCompetency(competencyElement));
            
            // Accessibility
            competencyElement.setAttribute('tabindex', '0');
            competencyElement.setAttribute('role', 'button');
            competencyElement.setAttribute('aria-label', `${principle} competency: ${this.principleScores[principle]}%`);
          }
        });
      }
      
      setupAccessibilitySupport() {
        // Keyboard navigation support
        document.addEventListener('keydown', (event) => {
          switch(event.key) {
            case 'ArrowDown':
              this.navigateAnswers('down');
              break;
            case 'ArrowUp':
              this.navigateAnswers('up');
              break;
            case 'ArrowRight':
              this.handleNavigation('next');
              break;
            case 'ArrowLeft':
              this.handleNavigation('previous');
              break;
            case 'Enter':
            case ' ':
              if (event.target.classList.contains('answer-option')) {
                this.selectAnswer(event.target);
              }
              break;
            case 'Escape':
              this.resetAssessmentView();
              break;
            case 'r':
              if (event.ctrlKey || event.metaKey) {
                this.handleNavigation('results');
              }
              break;
          }
        });
        
        // Screen reader announcements
        this.setupScreenReaderSupport();
      }
      
      // Answer interaction methods
      selectAnswer(option) {
        console.log('Selecting answer:', option);
        
        // Clear previous selection
        const allOptions = document.querySelectorAll('.answer-option');
        allOptions.forEach(opt => {
          opt.classList.remove('selected');
          opt.style.strokeWidth = '1';
          const circle = opt.querySelector('circle');
          if (circle) {
            circle.removeAttribute('fill');
            circle.querySelector('path')?.remove();
          }
        });
        
        // Mark new selection
        option.classList.add('selected');
        option.style.strokeWidth = '2';
        const circle = option.querySelector('circle');
        if (circle) {
          const score = option.getAttribute('data-score');
          this.styleSelectedAnswer(circle, score);
        }
        
        // Record answer
        const score = parseInt(option.getAttribute('data-score'));
        this.userAnswers[this.currentQuestion] = score;
        
        // Update real-time scoring
        this.updateRealTimeScore();
        this.announceAnswerSelection(option, score);
      }
      
      styleSelectedAnswer(circle, score) {
        const colors = {
          '1': '#6B7280',
          '2': '#F59E0B', 
          '3': '#3B82F6',
          '4': '#10B981',
          '5': '#EF4444'
        };
        
        circle.setAttribute('fill', colors[score]);
        
        // Add checkmark
        const checkmark = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        checkmark.setAttribute('d', 'M16 95 L19 98 L24 93');
        checkmark.setAttribute('stroke', 'white');
        checkmark.setAttribute('stroke-width', '2');
        checkmark.setAttribute('fill', 'none');
        circle.parentNode.appendChild(checkmark);
      }
      
      highlightAnswer(option) {
        if (!option.classList.contains('selected')) {
          option.style.filter = 'url(#levelGlow)';
          option.style.transform = 'translateX(3px)';
        }
      }
      
      unhighlightAnswer(option) {
        if (!option.classList.contains('selected')) {
          option.style.filter = 'none';
          option.style.transform = 'translateX(0)';
        }
      }
      
      focusAnswer(option) {
        this.highlightAnswer(option);
        const score = option.getAttribute('data-score');
        this.announceToScreenReader(`Answer option ${score}, focus on option`);
      }
      
      blurAnswer(option) {
        if (!option.classList.contains('selected')) {
          this.unhighlightAnswer(option);
        }
      }
      
      // Navigation methods
      handleNavigation(action) {
        console.log(`Navigation action: ${action}`);
        
        switch (action) {
          case 'previous':
            this.previousQuestion();
            break;
          case 'next':
            this.nextQuestion();
            break;
          case 'save':
            this.saveProgress();
            break;
          case 'skip':
            this.skipQuestion();
            break;
          case 'results':
            this.showResults();
            break;
        }
      }
      
      previousQuestion() {
        if (this.currentQuestion > 1) {
          this.currentQuestion--;
          this.loadQuestion(this.currentQuestion);
          this.announceToScreenReader(`Question ${this.currentQuestion} of ${this.totalQuestions}`);
        }
      }
      
      nextQuestion() {
        if (this.currentQuestion < this.totalQuestions) {
          this.currentQuestion++;
          this.loadQuestion(this.currentQuestion);
          this.announceToScreenReader(`Question ${this.currentQuestion} of ${this.totalQuestions}`);
        } else {
          this.completeAssessment();
        }
      }
      
      saveProgress() {
        this.saveToLocalStorage();
        this.announceToScreenReader('Progress saved successfully');
        this.showSaveConfirmation();
      }
      
      skipQuestion() {
        this.userAnswers[this.currentQuestion] = 0; // Skip = 0 points
        this.nextQuestion();
        this.announceToScreenReader('Question skipped, moving to next question');
      }
      
      showResults() {
        this.generateDetailedResults();
        this.showResultsModal();
        this.announceToScreenReader('Assessment results displayed');
      }
      
      // Level interaction methods
      showLevelDetails(level) {
        console.log(`Showing details for level ${level}`);
        const levelInfo = this.levelThresholds[level];
        this.displayLevelModal(level, levelInfo);
        this.announceLevelDetails(level, levelInfo);
      }
      
      highlightLevel(level) {
        const levelElement = document.querySelector(`[data-level="${level}"]`);
        if (levelElement && level !== this.currentLevel) {
          levelElement.style.filter = 'url(#levelGlow)';
          levelElement.style.transform = 'scale(1.02)';
        }
      }
      
      unhighlightLevel(level) {
        const levelElement = document.querySelector(`[data-level="${level}"]`);
        if (levelElement && level !== this.currentLevel) {
          levelElement.style.filter = 'none';
          levelElement.style.transform = 'scale(1)';
        }
      }
      
      // Competency interaction methods
      showCompetencyDetails(principle) {
        console.log(`Showing competency details for: ${principle}`);
        const score = this.principleScores[principle];
        this.displayCompetencyModal(principle, score);
        this.announceCompetencyDetails(principle, score);
      }
      
      highlightCompetency(element) {
        element.style.filter = 'url(#scoreGlow)';
        element.style.transform = 'scale(1.02)';
      }
      
      unhighlightCompetency(element) {
        element.style.filter = 'none';
        element.style.transform = 'scale(1)';
      }
      
      // Real-time scoring
      setupRealTimeScoring() {
        setInterval(() => {
          this.updateProgressIndicators();
        }, 1000);
      }
      
      updateRealTimeScore() {
        // Calculate new overall score based on answers
        const totalAnswers = Object.keys(this.userAnswers).length;
        const totalScore = Object.values(this.userAnswers).reduce((sum, score) => sum + score, 0);
        
        if (totalAnswers > 0) {
          this.overallScore = Math.round((totalScore / totalAnswers) * 20); // Scale to 100
          this.currentLevel = this.determineLevelFromScore(this.overallScore);
          
          this.updateScoreDisplays();
          this.updateLevelHighlighting();
          this.generatePersonalizedRecommendations();
        }
      }
      
      determineLevelFromScore(score) {
        for (let level = 5; level >= 1; level--) {
          const threshold = this.levelThresholds[level];
          if (score >= threshold.min) {
            return level;
          }
        }
        return 1;
      }
      
      updateScoreDisplays() {
        // Update progress bars and score displays
        console.log(`Updating score displays: Overall ${this.overallScore}%, Level ${this.currentLevel}`);
      }
      
      updateLevelHighlighting() {
        // Update current level highlighting
        for (let level = 1; level <= 5; level++) {
          const levelElement = document.querySelector(`[data-level="${level}"]`);
          if (levelElement) {
            if (level === this.currentLevel) {
              levelElement.classList.add('current');
              levelElement.style.filter = 'url(#currentLevelGlow)';
            } else if (level < this.currentLevel) {
              levelElement.classList.add('completed');
              levelElement.classList.remove('current');
            } else {
              levelElement.classList.remove('current', 'completed');
            }
          }
        }
      }
      
      updateProgressIndicators() {
        // Update various progress indicators
        console.log('Updating progress indicators');
      }
      
      // Personalization engine
      setupPersonalizationEngine() {
        this.generatePersonalizedRecommendations();
        this.createLearningPath();
        this.identifyStrengthsAndWeaknesses();
      }
      
      generatePersonalizedRecommendations() {
        const weakestAreas = this.identifyWeakestAreas();
        const recommendations = this.createRecommendations(weakestAreas);
        this.updateRecommendationsPanel(recommendations);
      }
      
      identifyWeakestAreas() {
        const sortedPrinciples = Object.entries(this.principleScores)
          .sort(([, scoreA], [, scoreB]) => scoreA - scoreB)
          .slice(0, 2); // Top 2 weakest areas
        
        return sortedPrinciples;
      }
      
      createRecommendations(weakestAreas) {
        return weakestAreas.map(([principle, score], index) => ({
          priority: index + 1,
          principle,
          score,
          actions: this.getRecommendedActions(principle),
          timeframe: this.estimateTimeframe(score)
        }));
      }
      
      getRecommendedActions(principle) {
        const actions = {
          strategicTesting: [
            'AI-assisted test generation',
            'Coverage optimization',
            'Integration testing patterns'
          ],
          intelligentReview: [
            'AI-powered code review',
            'Automated feedback loops',
            'Quality improvement cycles'
          ],
          contextMastery: [
            'Repository analysis optimization',
            'Context generation strategies',
            'AI prompt enhancement'
          ],
          dynamicPlanning: [
            'Adaptive planning techniques',
            'Task breakdown optimization',
            'Progress tracking systems'
          ],
          codeEvolution: [
            'Iterative development practices',
            'Code quality improvement',
            'Refactoring strategies'
          ]
        };
        
        return actions[principle] || [];
      }
      
      estimateTimeframe(score) {
        if (score < 40) return '4-6 weeks';
        if (score < 60) return '3-4 weeks';
        if (score < 80) return '2-3 weeks';
        return '1-2 weeks';
      }
      
      createLearningPath() {
        const learningPath = {
          week1: 'Strategic Testing fundamentals and AI integration',
          week2: 'Intelligent Review implementation',
          week3: 'Advanced optimization techniques',
          week4: 'Integration testing and validation'
        };
        
        this.updateLearningPathDisplay(learningPath);
      }
      
      identifyStrengthsAndWeaknesses() {
        const strengths = Object.entries(this.principleScores)
          .filter(([, score]) => score >= 75)
          .map(([principle]) => principle);
        
        const weaknesses = Object.entries(this.principleScores)
          .filter(([, score]) => score < 65)
          .map(([principle]) => principle);
        
        return { strengths, weaknesses };
      }
      
      // Question management
      generateQuestions() {
        // Generate assessment questions
        return Array.from({ length: 25 }, (_, i) => ({
          id: i + 1,
          principle: this.getQuestionPrinciple(i + 1),
          text: this.getQuestionText(i + 1),
          options: this.getQuestionOptions(i + 1)
        }));
      }
      
      getQuestionPrinciple(questionNumber) {
        const principles = ['contextMastery', 'dynamicPlanning', 'codeEvolution', 'strategicTesting', 'intelligentReview'];
        return principles[(questionNumber - 1) % principles.length];
      }
      
      getQuestionText(questionNumber) {
        const texts = {
          16: 'How do you approach test case generation in your current workflow?',
          // Add more questions as needed
        };
        
        return texts[questionNumber] || `Assessment question ${questionNumber}`;
      }
      
      getQuestionOptions(questionNumber) {
        return [
          { text: 'Traditional approach', score: 1 },
          { text: 'Some AI assistance', score: 2 },
          { text: 'AI-enhanced integration', score: 3 },
          { text: 'Comprehensive optimization', score: 4 },
          { text: 'Elite transformation', score: 5 }
        ];
      }
      
      loadQuestion(questionNumber) {
        const question = this.questions[questionNumber - 1];
        if (question) {
          this.updateQuestionDisplay(question);
          this.loadPreviousAnswer(questionNumber);
        }
      }
      
      updateQuestionDisplay(question) {
        console.log('Loading question:', question);
        // Implementation would update the question panel
      }
      
      loadPreviousAnswer(questionNumber) {
        const previousAnswer = this.userAnswers[questionNumber];
        if (previousAnswer) {
          const option = document.querySelector(`[data-score="${previousAnswer}"]`);
          if (option) {
            this.selectAnswer(option);
          }
        }
      }
      
      // Assessment completion
      completeAssessment() {
        this.assessmentComplete = true;
        this.calculateFinalScores();
        this.generateDetailedResults();
        this.showCompletionCelebration();
        this.announceAssessmentCompletion();
      }
      
      calculateFinalScores() {
        // Calculate final scores for each principle
        Object.keys(this.principleScores).forEach(principle => {
          const principleQuestions = this.questions.filter(q => q.principle === principle);
          const principleAnswers = principleQuestions.map(q => this.userAnswers[q.id] || 0);
          const averageScore = principleAnswers.reduce((sum, score) => sum + score, 0) / principleAnswers.length;
          this.principleScores[principle] = Math.round(averageScore * 20); // Scale to 100
        });
        
        // Calculate overall score
        const totalScore = Object.values(this.principleScores).reduce((sum, score) => sum + score, 0);
        this.overallScore = Math.round(totalScore / 5);
        this.currentLevel = this.determineLevelFromScore(this.overallScore);
      }
      
      generateDetailedResults() {
        const results = {
          overallScore: this.overallScore,
          currentLevel: this.currentLevel,
          principleScores: this.principleScores,
          recommendations: this.generatePersonalizedRecommendations(),
          nextSteps: this.createLearningPath(),
          timeToNextLevel: this.estimateTimeToNextLevel()
        };
        
        return results;
      }
      
      estimateTimeToNextLevel() {
        const nextLevelThreshold = this.levelThresholds[this.currentLevel + 1];
        if (!nextLevelThreshold) return 'Mastery achieved!';
        
        const pointsNeeded = nextLevelThreshold.min - this.overallScore;
        const weeksEstimate = Math.ceil(pointsNeeded / 2); // Rough estimate
        
        return `${weeksEstimate} weeks with focused improvement`;
      }
      
      // Utility methods
      highlightButton(button) {
        button.style.filter = 'url(#scoreGlow)';
        button.style.transform = 'translateY(-2px)';
      }
      
      unhighlightButton(button) {
        button.style.filter = 'none';
        button.style.transform = 'translateY(0)';
      }
      
      navigateAnswers(direction) {
        const options = document.querySelectorAll('.answer-option');
        const currentFocus = document.activeElement;
        const currentIndex = Array.from(options).indexOf(currentFocus);
        
        let nextIndex;
        if (direction === 'down') {
          nextIndex = currentIndex < options.length - 1 ? currentIndex + 1 : 0;
        } else {
          nextIndex = currentIndex > 0 ? currentIndex - 1 : options.length - 1;
        }
        
        options[nextIndex].focus();
      }
      
      resetAssessmentView() {
        // Reset to overview state
        this.announceToScreenReader('Assessment view reset');
      }
      
      // Modal and display methods
      displayLevelModal(level, levelInfo) {
        console.log(`Displaying level modal for level ${level}:`, levelInfo);
      }
      
      displayCompetencyModal(principle, score) {
        console.log(`Displaying competency modal for ${principle}: ${score}%`);
      }
      
      showResultsModal() {
        console.log('Showing results modal');
      }
      
      showSaveConfirmation() {
        console.log('Showing save confirmation');
      }
      
      showCompletionCelebration() {
        console.log('Showing completion celebration');
      }
      
      updateRecommendationsPanel(recommendations) {
        console.log('Updating recommendations panel:', recommendations);
      }
      
      updateLearningPathDisplay(learningPath) {
        console.log('Updating learning path display:', learningPath);
      }
      
      // Accessibility methods
      setupScreenReaderSupport() {
        // Create live region for announcements
        const liveRegion = document.createElement('div');
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.style.position = 'absolute';
        liveRegion.style.left = '-10000px';
        liveRegion.style.width = '1px';
        liveRegion.style.height = '1px';
        liveRegion.style.overflow = 'hidden';
        liveRegion.id = 'assessment-announcements';
        
        document.body.appendChild(liveRegion);
      }
      
      announceToScreenReader(message) {
        const liveRegion = document.getElementById('assessment-announcements');
        if (liveRegion) {
          liveRegion.textContent = message;
        }
      }
      
      announceAnswerSelection(option, score) {
        const message = `Answer selected with score ${score}. Progress updated.`;
        this.announceToScreenReader(message);
      }
      
      announceLevelDetails(level, levelInfo) {
        const message = `Level ${level}: ${levelInfo.name}. Score range: ${levelInfo.min} to ${levelInfo.max}.`;
        this.announceToScreenReader(message);
      }
      
      announceCompetencyDetails(principle, score) {
        const message = `${principle} competency: ${score}%. ` +
                       `Level ${this.determineLevelFromScore(score)}.`;
        this.announceToScreenReader(message);
      }
      
      announceAssessmentCompletion() {
        const message = `Assessment completed! Overall score: ${this.overallScore}%. ` +
                       `Current level: ${this.levelThresholds[this.currentLevel].name}.`;
        this.announceToScreenReader(message);
      }
      
      // Offline capabilities
      setupOfflineCapabilities() {
        // Store assessment data for offline use
        const assessmentData = {
          questions: this.questions,
          userAnswers: this.userAnswers,
          currentQuestion: this.currentQuestion,
          overallScore: this.overallScore,
          principleScores: this.principleScores,
          currentLevel: this.currentLevel
        };
        
        localStorage.setItem('assessmentData', JSON.stringify(assessmentData));
        localStorage.setItem('assessmentOfflineMode', 'true');
        
        console.log('Offline capabilities enabled');
      }
      
      saveToLocalStorage() {
        this.setupOfflineCapabilities();
        console.log('Progress saved to local storage');
      }
      
      loadOfflineData() {
        const offlineData = localStorage.getItem('assessmentData');
        if (offlineData) {
          return JSON.parse(offlineData);
        }
        return null;
      }
    }
    
    // Initialize the assessment when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        new MaturityAssessment();
      });
    } else {
      new MaturityAssessment();
    }
    ]]>
  </script>
</svg>